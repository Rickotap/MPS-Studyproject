@ Aufgabe 3:
@ opti = 0
	0x8218	<main>:		push	{r11}		; (str r11, [sp, #-4]!)
-	0x821c	<main+4>:		add	r11, sp, #0	; 0x0
-	0x8220	<main+8>:		sub	sp, sp, #8	; 0x8
	0x8224	<main+12>:		mov	r3, #1	; 0x1
-	0x8228	<main+16>:		str	r3, [r11, #-8]
-	0x822c	<main+20>:		mov	r3, #2	; 0x2
-	0x8230	<main+24>:		str	r3, [r11, #-4]
-	0x8234	<main+28>:		mov	r3, #0	; 0x0
-	0x8238	<main+32>:		mov	r0, r3
-	0x823c	<main+36>:		add	sp, r11, #0	; 0x0
-	0x8240	<main+40>:		pop	{r11}
-	0x8244	<main+44>:		bx	lr

----


	8	{
	0x8218	<main>:		push	{r11}		; (str r11, [sp, #-4]!)
-	0x821c	<main+4>:		add	r11, sp, #0	; 0x0
-	0x8220	<main+8>:		sub	sp, sp, #8	; 0x8
	9		int a, b;
	10		a=0x3333;
	0x8224	<main+12>:		mov	r3, #13056	; 0x3300
-	0x8228	<main+16>:		add	r3, r3, #51	; 0x33
-	0x822c	<main+20>:		str	r3, [r11, #-8]
	11		b=0x6666;
-	0x8230	<main+24>:		mov	r3, #26112	; 0x6600
-	0x8234	<main+28>:		add	r3, r3, #102	; 0x66
-	0x8238	<main+32>:		str	r3, [r11, #-4]
	12		return (0);
-	0x823c	<main+36>:		mov	r3, #0	; 0x0
-	0x8240	<main+40>:		mov	r0, r3
-	0x8244	<main+44>:		add	sp, r11, #0	; 0x0
-	0x8248	<main+48>:		pop	{r11}
-	0x824c	<main+52>:		bx	lr


@ Aufgabe 4:
@ opti = 0
      
10	{
-	0x8218	<main>:		push	{r11}		; (str r11, [sp, #-4]!)
-	0x821c	<main+4>:		add	r11, sp, #0	; 0x0
	11		b=0x666;
	0x8220	<main+8>:		ldr	r2, [pc, #44]	; 0x8254 <main+60>
-	0x8224	<main+12>:		mov	r3, #1632	; 0x660
-	0x8228	<main+16>:		add	r3, r3, #6	; 0x6
	0x822c	<main+20>:		str	r3, [r2]
	12		a=0x999;	
-	0x8230	<main+24>:		ldr	r2, [pc, #32]	; 0x8258 <main+64>
-	0x8234	<main+28>:		mov	r3, #2448	; 0x990
-	0x8238	<main+32>:		add	r3, r3, #9	; 0x9
-	0x823c	<main+36>:		str	r3, [r2]
	13		return (0);
-	0x8240	<main+40>:		mov	r3, #0	; 0x0
-	0x8244	<main+44>:		mov	r0, r3
-	0x8248	<main+48>:		add	sp, r11, #0	; 0x0
-	0x824c	<main+52>:		pop	{r11}
-	0x8250	<main+56>:		bx	lr
-	0x8254	<main+60>:		andeq	r2, r1, r4, lsr #24
-	0x8258	<main+64>:		andeq	r2, r1, r8, lsr #24



@ Aufgabe 5
@ Opti = 0
	10	{
-	0x8218	<main>:		push	{r11}		; (str r11, [sp, #-4]!)
-	0x821c	<main+4>:		add	r11, sp, #0	; 0x0
-	0x8220	<main+8>:		sub	sp, sp, #8	; 0x8
	11		int c, d;
	12		c= 0x44;
-	0x8224	<main+12>:		mov	r3, #68	; 0x44
-	0x8228	<main+16>:		str	r3, [r11, #-8]
	13		d= 0x99;
-	0x822c	<main+20>:		mov	r3, #153	; 0x99
-	0x8230	<main+24>:		str	r3, [r11, #-4]
	14		
	15		a=c;
-	0x8234	<main+28>:		ldr	r3, [pc, #36]	; 0x8260 <main+72>
-	0x8238	<main+32>:		ldr	r2, [r11, #-8]
-	0x823c	<main+36>:		str	r2, [r3]
	16		b=d;
-	0x8240	<main+40>:		ldr	r3, [pc, #28]	; 0x8264 <main+76>
-	0x8244	<main+44>:		ldr	r2, [r11, #-4]
-	0x8248	<main+48>:		str	r2, [r3]
	17		return (0);
-	0x824c	<main+52>:		mov	r3, #0	; 0x0
-	0x8250	<main+56>:		mov	r0, r3
-	0x8254	<main+60>:		add	sp, r11, #0	; 0x0
-	0x8258	<main+64>:		pop	{r11}
-	0x825c	<main+68>:		bx	lr
-	0x8260	<main+72>:		andeq	r2, r1, r4, lsr r12
-	0x8264	<main+76>:		andeq	r2, r1, r0, lsr r12

@ opti = 1

	10	{
	11		int c, d;
	12		c= 0x44;
	13		d= 0x99;
	14		
	15		a=c;
-	0x8218	<main>:		mov	r2, #68	; 0x44
-	0x821c	<main+4>:		ldr	r3, [pc, #20]	; 0x8238 <main+32>
-	0x8220	<main+8>:		str	r2, [r3]
	16		b=d;
-	0x8224	<main+12>:		mov	r2, #153	; 0x99
-	0x8228	<main+16>:		ldr	r3, [pc, #12]	; 0x823c <main+36>
-	0x822c	<main+20>:		str	r2, [r3]
-	0x8230	<main+24>:		mov	r0, #0	; 0x0
-	0x8234	<main+28>:		bx	lr
-	0x8238	<main+32>:		andeq	r2, r1, r4, lsl #24
-	0x823c	<main+36>:		andeq	r2, r1, r0, lsl #24


@ Aufgabe 6
@ Opti = 0

	15	{
-	0x8254	<main>:		push	{r11, lr}
-	0x8258	<main+4>:		add	r11, sp, #4	; 0x4
-	0x825c	<main+8>:		sub	sp, sp, #8	; 0x8
	16		int a, b;
	17		a= 0x1010101;
-	0x8260	<main+12>:		mov	r3, #256	; 0x100
-	0x8264	<main+16>:		add	r3, r3, #1	; 0x1
-	0x8268	<main+20>:		orr	r3, r3, r3, lsl #16
-	0x826c	<main+24>:		str	r3, [r11, #-12]
	18		b= 0x2020202;
-	0x8270	<main+28>:		mov	r3, #512	; 0x200
-	0x8274	<main+32>:		add	r3, r3, #2	; 0x2
-	0x8278	<main+36>:		orr	r3, r3, r3, lsl #16
-	0x827c	<main+40>:		str	r3, [r11, #-8]
	19		c= 0x3030303;
-	0x8280	<main+44>:		ldr	r2, [pc, #64]	; 0x82c8 <main+116>
-	0x8284	<main+48>:		mov	r3, #768	; 0x300
-	0x8288	<main+52>:		add	r3, r3, #3	; 0x3
-	0x828c	<main+56>:		orr	r3, r3, r3, lsl #16
-	0x8290	<main+60>:		str	r3, [r2]
	20		
	21		d= addition(a, b, c);
-	0x8294	<main+64>:		ldr	r3, [pc, #44]	; 0x82c8 <main+116>
-	0x8298	<main+68>:		ldr	r3, [r3]
-	0x829c	<main+72>:		ldr	r0, [r11, #-12]
-	0x82a0	<main+76>:		ldr	r1, [r11, #-8]
-	0x82a4	<main+80>:		mov	r2, r3
-	0x82a8	<main+84>:		bl	0x8218 <addition>
-	0x82ac	<main+88>:		mov	r2, r0
-	0x82b0	<main+92>:		ldr	r3, [pc, #20]	; 0x82cc <main+120>
-	0x82b4	<main+96>:		str	r2, [r3]
	22		return (0);
-	0x82b8	<main+100>:		mov	r3, #0	; 0x0
-	0x82bc	<main+104>:		mov	r0, r3
-	0x82c0	<main+108>:		sub	sp, r11, #4	; 0x4
-	0x82c4	<main+112>:		pop	{r11, pc}
-	0x82c8	<main+116>:		strheq	r2, [r1], -r4
-	0x82cc	<main+120>:		strheq	r2, [r1], -r8


@ opti = 1

 	15	{
-	0x8224	<main>:		push	{lr}		; (str lr, [sp, #-4]!)
	16		int a, b;
	17		a= 0x1010101;
	18		b= 0x2020202;
	19		c= 0x3030303;
-	0x8228	<main+4>:		mov	r2, #768	; 0x300
-	0x822c	<main+8>:		add	r2, r2, #3	; 0x3
-	0x8230	<main+12>:		orr	r2, r2, r2, lsl #16
-	0x8234	<main+16>:		ldr	r3, [pc, #44]	; 0x8268 <main+68>
-	0x8238	<main+20>:		str	r2, [r3]
	20		
	21		d= addition(a, b, c);
-	0x823c	<main+24>:		mov	r0, #256	; 0x100
-	0x8240	<main+28>:		add	r0, r0, #1	; 0x1
-	0x8244	<main+32>:		orr	r0, r0, r0, lsl #16
-	0x8248	<main+36>:		mov	r1, #512	; 0x200
-	0x824c	<main+40>:		add	r1, r1, #2	; 0x2
-	0x8250	<main+44>:		orr	r1, r1, r1, lsl #16
-	0x8254	<main+48>:		bl	0x8218 <addition>
-	0x8258	<main+52>:		ldr	r3, [pc, #12]	; 0x826c <main+72>
-	0x825c	<main+56>:		str	r0, [r3]
-	0x8260	<main+60>:		mov	r0, #0	; 0x0
-	0x8264	<main+64>:		pop	{pc}		; (ldr pc, [sp], #4)
-	0x8268	<main+68>:		andeq	r2, r1, r8, asr #24
-	0x826c	<main+72>:		andeq	r2, r1, r12, asr #24


@ Aufgabe 7
@ opti = 0
	15	{
-	0x825c	<main>:		push	{r11, lr}
-	0x8260	<main+4>:		add	r11, sp, #4	; 0x4
-	0x8264	<main+8>:		sub	sp, sp, #8	; 0x8
	16		int a, b;
	17		a= 0x1010101;
-	0x8268	<main+12>:		mov	r3, #256	; 0x100
-	0x826c	<main+16>:		add	r3, r3, #1	; 0x1
-	0x8270	<main+20>:		orr	r3, r3, r3, lsl #16
-	0x8274	<main+24>:		str	r3, [r11, #-8]
	18		b= 0x2020202;
-	0x8278	<main+28>:		mov	r3, #512	; 0x200
-	0x827c	<main+32>:		add	r3, r3, #2	; 0x2
-	0x8280	<main+36>:		orr	r3, r3, r3, lsl #16
-	0x8284	<main+40>:		str	r3, [r11, #-12]
	19		c= 0x3030303;
-	0x8288	<main+44>:		ldr	r2, [pc, #72]	; 0x82d8 <main+124>
-	0x828c	<main+48>:		mov	r3, #768	; 0x300
-	0x8290	<main+52>:		add	r3, r3, #3	; 0x3
-	0x8294	<main+56>:		orr	r3, r3, r3, lsl #16
-	0x8298	<main+60>:		str	r3, [r2]
	20		
	21		d= addition(&a, &b, c);
-	0x829c	<main+64>:		ldr	r3, [pc, #52]	; 0x82d8 <main+124>
-	0x82a0	<main+68>:		ldr	r3, [r3]
-	0x82a4	<main+72>:		sub	r1, r11, #8	; 0x8
-	0x82a8	<main+76>:		sub	r2, r11, #12	; 0xc
-	0x82ac	<main+80>:		mov	r0, r1
-	0x82b0	<main+84>:		mov	r1, r2
-	0x82b4	<main+88>:		mov	r2, r3
-	0x82b8	<main+92>:		bl	0x8218 <addition>
-	0x82bc	<main+96>:		mov	r2, r0
-	0x82c0	<main+100>:		ldr	r3, [pc, #20]	; 0x82dc <main+128>
-	0x82c4	<main+104>:		str	r2, [r3]
	22		return (0);
-	0x82c8	<main+108>:		mov	r3, #0	; 0x0
	23	}
-	0x82cc	<main+112>:		mov	r0, r3
-	0x82d0	<main+116>:		sub	sp, r11, #4	; 0x4
-	0x82d4	<main+120>:		pop	{r11, pc}
-	0x82d8	<main+124>:		andeq	r2, r1, r4, asr #25
-	0x82dc	<main+128>:		andeq	r2, r1, r8, asr #25

@ opti =1 

	15	{
-	0x822c	<main>:		push	{lr}		; (str lr, [sp, #-4]!)
-	0x8230	<main+4>:		sub	sp, sp, #8	; 0x8
	16		int a, b;
	17		a= 0x1010101;
-	0x8234	<main+8>:		mov	r3, #256	; 0x100
-	0x8238	<main+12>:		add	r3, r3, #1	; 0x1
-	0x823c	<main+16>:		orr	r3, r3, r3, lsl #16
-	0x8240	<main+20>:		str	r3, [sp, #4]
	18		b= 0x2020202;
-	0x8244	<main+24>:		mov	r3, #512	; 0x200
-	0x8248	<main+28>:		add	r3, r3, #2	; 0x2
-	0x824c	<main+32>:		orr	r3, r3, r3, lsl #16
-	0x8250	<main+36>:		str	r3, [sp]
	19		c= 0x3030303;
-	0x8254	<main+40>:		mov	r2, #768	; 0x300
-	0x8258	<main+44>:		add	r2, r2, #3	; 0x3
-	0x825c	<main+48>:		orr	r2, r2, r2, lsl #16
-	0x8260	<main+52>:		ldr	r3, [pc, #32]	; 0x8288 <main+92>
-	0x8264	<main+56>:		str	r2, [r3]
	20		
	21		d= addition(&a, &b, c);
-	0x8268	<main+60>:		add	r0, sp, #4	; 0x4
-	0x826c	<main+64>:		mov	r1, sp
-	0x8270	<main+68>:		bl	0x8218 <addition>
-	0x8274	<main+72>:		ldr	r3, [pc, #16]	; 0x828c <main+96>
-	0x8278	<main+76>:		str	r0, [r3]
	22		return (0);
	23	}
-	0x827c	<main+80>:		mov	r0, #0	; 0x0
-	0x8280	<main+84>:		add	sp, sp, #8	; 0x8
-	0x8284	<main+88>:		pop	{pc}
-	0x8288	<main+92>:		andeq	r2, r1, r12, ror #24
-	0x828c	<main+96>:		andeq	r2, r1, r0, ror r12